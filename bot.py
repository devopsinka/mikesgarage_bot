import telebot
import os
import schedule
import time
import requests
from telebot import apihelper
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from string import Template
from telebot import types
import config
import proxyconfig


bot = telebot.TeleBot(config.TOKEN)
proxy = telebot.TeleBot(proxyconfig.apihelper.proxy)

user_dict = {}
x = 17

class User:
    def __init__(self, city):
        self.city = city

        keys = ['fullname', 'phone', 'vin', 'doit']

        for key in keys:
            self.key = None


# –µ—Å–ª–∏ /help, /start
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    keyboardstart = types.InlineKeyboardMarkup()
    button_registration = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å ‚ö°Ô∏è", callback_data="zapis")
    button_write_to_us = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫ üì±Ô∏è", callback_data="recall")
    keyboardstart.add(button_registration)
    keyboardstart.add(button_write_to_us)
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, "
                     + message.from_user.first_name + '\n'
                     + "–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ MikesGarage" + '\n\n'
                     + "–Ø –º–æ–≥—É:\n\n"
                     + "- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å\n"
                     + "- –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n\n"
                     + "/start - –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
                     , reply_markup=keyboardstart)


@bot.callback_query_handler(func=lambda message: True)
def send_anytext(message):
    chat_id = message.message.chat.id
    if message.data == 'zapis':
        msg = bot.send_message(chat_id, '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', parse_mode='HTML')
    bot.register_next_step_handler(msg, process_fullname_step)


def process_fullname_step(message):
   try:
        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)
        user = user_dict[chat_id]
        user.fullname = message.text
        if not user.fullname.isalpha():
            msg = bot.reply_to(message, '–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∞–∫–æ–µ –∏–º—è\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
            bot.register_next_step_handler(msg, process_fullname_step)
            return
        msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à VIN')
        bot.register_next_step_handler(msg, process_vin_step)
        
   except Exception as e:
        bot.reply_to(message, 'ooops!!')
        
def process_vin_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.vin = message.text
        
        if len(user.vin) < 17:
            for x in range(0, len(user.vin), 17):
                msg = bot.reply_to(message, 'VIN –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 17 —Å–∏–º–≤–æ–ª–æ–≤\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                bot.register_next_step_handler(msg, process_vin_step)
        else:
            msg = bot.send_message(chat_id, '–û–ø–∏—à–∏—Ç—É –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —Å –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º, –Ω–∞–ø–∏—à–∏—Ç–µ - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.\n–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º')
            bot.register_next_step_handler(msg, process_what_cando)

    except Exception as e:
        bot.reply_to(message, 'oops!!')

def process_what_cando(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.doit = message.text
        msg = bot.send_message(chat_id, '–ö–∞–∫–æ–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?')
        bot.register_next_step_handler(msg, process_phone_step)
    except Exception as e:
        bot.reply_to(message, 'oops!!')


def process_phone_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text
        bot.send_message(chat_id, '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏–º.\n–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.')
        bot.send_message(config.chat_id, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode="Markdown")

    except Exception as e:
        bot.reply_to(message, 'ooops!!')


def getRegData(user, title, name):
    t = Template('$title *$name* \n –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: *$fullname* \n VIN-–Ω–æ–º–µ—Ä:*$vin* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: *$doit*')

    return t.substitute({
        'title': title,
        'name': name,
        'fullname': user.fullname,
        'vin': user.vin,
        'phone': user.phone,
        'doit': user.doit,
    })


bot.polling()
