import telebot
import os
import schedule
import time
import requests
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from string import Template
from telebot import types
from telegram import replymarkup
import config
import mysql.connector
import logging

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

db = mysql.connector.connect(
  host="localhost",
  user="root",
  password="",
  port = "3306",
  database = "mikes_db"
)


bot = telebot.TeleBot(config.TOKEN)

cursor = db.cursor()
#cursor.execute("CREATE TABLE users (first_name VARCHAR(255), last_name VARCHAR(255))")
#cursor.execute("ALTER TABLE users ADD COLUMN (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT UNIQUE)")


user_data = {}
#x = 17

class User:
    def __init__(self, first_name):
        self.first_name = first_name,
        self.last_name = ''
 
    

        keys = ['name','first_name','last_name', 'phone', 'vin', 'doit']

        for key in keys:
            self.key = None


# –µ—Å–ª–∏ /help, /start
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                ("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, " + message.from_user.first_name + '!'"\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å–∏–ª–∏–π.\n"
                  "–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ MikesGarage.\n\n"
                  "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ–π—á–∞—Å:\n"
                  "- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∞–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫—É—é\n"
                  "- –£–∑–Ω–∞–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç–∞\n"
                  "- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
                  "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                  "/order_a_call - –∑–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫\n"
                  "/contacts - –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
                ))
    time.sleep(1)
    bot.send_message(message.chat.id,
                ("–ü—Ä–µ–∂–¥–µ —á–µ–º —è —Å–º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –∑–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã –≤ mikes_cloud –∏ –Ω–∏–∫—É–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è üí™"
                ))
    time.sleep(1)
    keyboardstart = types.InlineKeyboardMarkup()
    keyboardstart.row(
           telebot.types.InlineKeyboardButton(text="–î–∞",callback_data="Yes"),
           telebot.types.InlineKeyboardButton(text="–ù–µ—Ç",callback_data="No"),
       )
    bot.send_message(message.chat.id, '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?' ,reply_markup=keyboardstart)


@bot.callback_query_handler(func=lambda message: True)
def send_anytext(message):
    chat_id = message.message.chat.id
    if message.data == 'Yes':
        msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        bot.register_next_step_handler(msg, process_first_name_step)
    if message.data == 'No':
        msg = bot.send_message(chat_id, '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ\n\n /contacts - –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n / - –∑–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫\n\n'
        '–ù–∞–∂–º–∏—Ç–µ –î–∞ üëÜ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏')

def process_first_name_step(message):
   try:
        user_id = message.from_user.id
        user_data[user_id] = User(message.text)

        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
        bot.register_next_step_handler(msg, process_last_name_step)

   except Exception as e:
        print(e)




def process_last_name_step(message):
    try:
        user_id = message.from_user.id
        user = user_data[user_id]
        user.last_name = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à VIN')
        bot.register_next_step_handler(msg, process_vin_step)

    except Exception as e:
        print(e)
        
def process_vin_step(message):
    try:
        user_id = message.from_user.id
        user = user_data[user_id]
        user.user_vin = message.text

        msg = bot.send_message(message.chat.id, '–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã—Ö–ª–æ–ø')
        bot.register_next_step_handler(msg, process_what_cando)

    except Exception as e:
        bot.reply_to(message, 'oops!!')

def process_what_cando(message):
    try:
        user_id = message.from_user.id
        user = user_data[user_id]
        user.doit = message.text

        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?')
        bot.register_next_step_handler(msg, process_phone_step)

    except Exception as e:
        bot.reply_to(message, 'oops!!')



def process_phone_step(message):
    try:
        user_id = message.from_user.id
        user = user_data[user_id]
        user.user_phone = message.text
        sql = "INSERT INTO users (user_id, first_name, last_name, user_phone, user_vin) \
                                  VALUES (%s, %s, %s)"
        val = (user_id ,user.first_name, user.last_name,user.user_phone, user.user_vin)
        cursor.execute(sql, val)
        db.commit()

        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏–º.\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.')
        bot.send_message(config.chat_id, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode="Markdown")

    except Exception as e:
        print(e)


def getRegData(user, title, name):
    t = Template('$title *$name* \n –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: *$first_name* \n –§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞: *$last_name* \n VIN-–Ω–æ–º–µ—Ä:*$vin* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: *$doit*')

    return t.substitute({
        'title': title,
        'name': name,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'vin': user.user_vin,
        'phone': user.user_phone,
        'doit': user.doit,
    })


bot.polling()